<?php
/**
 * Implements hook_block_info().
 */
function love_layout_block_info() {
  $blocks = array();
  $blocks['love_user_block'] = array(
    'info' => t('the user info display on proile page.'),
    //'region' => 'sidebar_first',
  );
  // takes user pictures from user profile and put it in a block
  $blocks['user_picture'] = array(
    'info' => t('User picture'),
    'cache' => DRUPAL_NO_CACHE, //to be confirmed
  );
  // takes the local tasks and put it in a block
  $blocks['menu_local_task'] = array(
    'info' => t('Menu local tabs'),
    'cache' => DRUPAL_NO_CACHE, //to be confirmed
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'user/*',
  );
  return $blocks;
}
/**
 * Implements hook_block_view().
 */
function love_layout_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'love_user_block':
      $block['subject'] = NULL;//t('User info')
      $block['content'] = love_layout_user_block();
      break;
    case 'user_picture':
      $block['title'] = NULL;
      global $user;
      $variables['account'] = $user;
      $block['content'] = love_layout_template_preprocess_user_picture($variables);
      break;

    case 'menu_local_task':
      $block['title'] = NULL;
        //Do not call menu_primary_local_tasks or menu_secondary_local_tasks because it does not output single item...
      $block['content'] = '';//menu_local_tasks();
  }
  return $block;
}

/**
 * Get relate user info , context will be  used.
 */
function love_layout_user_block() {
  global $user;
  //TODO: 
  $account = user_load(arg(1));
  $account=$account?$account:$user;
  $variables['account'] = $account;
  $picture = love_layout_template_preprocess_user_picture($variables);
  if($account->uid)
  $signature = $account->signature?$user->signature:"这家伙很懒，还没写签名....这家伙很懒，还没写签名....这家伙很懒，还没写签名....";

  $output = '
  <div class="aside">
              <div class="info-box">
                  <div class="avatar">
                     '.$picture.'
                  </div>
                  <div class="description description-with-follow">
                    '.$signature.'

                  </div>
                  <div class="links links-with-follow">
                      <a href="http://feesx.diandian.com/submit">投稿</a> / 
                      <a href="http://feesx.diandian.com/inbox">私信</a> / 
                      <a href="http://feesx.diandian.com/archive">存档</a> /
                      <a href="http://feesx.diandian.com/rss">RSS</a>
                  </div>
                  
                  <div class="follow">
                      <a class="follow-btn" href="http://www.diandian.com/follow/feesx">交友申请</a>
                  </div>
                  
              </div>
          </div>';
          $variables['account'] = $account;
          $output .= _love_user_relationships_link($variables);
  return $output;//.drupal_render(menu_local_tasks());
}


//TODO 定制最近来访 主题9宫格
/**
 * Implements hook_block_view().
 * @see user_visits_adv_block_view($delta = '')
 */
/**
* Implementation of hook_block_view_MODULE_DELTA_alter
*/
function love_layout_block_view_alter(&$data, $block) {

  if($block->delta == 'my_latest_visitors'){
    global $user;
    $limit = variable_get('user_visits_block_items_' . $block->delta, 9);
    $data['content'] =  user_visits_display_block_4love($user->uid, $limit);
  }

  if( $block->delta == 'latest_visitors'){
      //$block['subject'] = t('Latest visitors');
      //$block['content'] = user_visits_display_block_1(NULL, $limit);
      //dpm($block,'block');
      //$data['content'] = 'nothings';
      //dpm($data,'data'); 
  }
    
  //return $block;
}
/**
 * Get latest visitors for block content
 */
function user_visits_display_block_4love($uid = NULL, $limit = 5) {
  $output = "";
  if (!$uid && (arg(0) == 'user' && is_numeric(arg(1)))) {
    $uid = arg(1);
  }

  if ($uid) {
    $visitors = user_visits_latest($uid, $limit); 
    $output .= '<div class="clearfix recent-visits">';
    if (is_array($visitors)) {
      foreach ($visitors as $visitor) {
        $account = user_load($visitor->vuid);
        $output .= theme('user_visits_4love', array('account' => $account, 'timestamp' => $visitor->visit));
      }
    }
    $output = theme('user_visits_total', array('total' => user_visits_total($uid))).$output;
  }
  $output .= '</div>';
  return $output;
}
/**
 * Implements of hook_theme().
 */
function love_layout_theme($existing, $type, $theme, $path) {
  return array(
    'user_visits_4love' => array(
      'variables' => array(
        'account'   => NULL,
        'timestamp' => NULL,
        'referer'   => NULL,
      ),
    ),
  );
}

/**
 * Themeable function.
 */
function theme_user_visits_4love($account, $timestamp = NULL, $referer = NULL) {
  $output  = '<div class="recent-visit">' . "\n";
  //$output .= theme('user_picture', array($account));

  $output .= love_layout_template_preprocess_user_picture($account);
  $output .= ' <div class="name">' . theme('username', $account) . '</div>' . "\n";
  /*if ($account['timestamp']) {
    $output .= $account['timestamp'] ? ' <div class="visit">' . t('!time ago', array('!time' => format_interval(REQUEST_TIME - $account['timestamp']))) . '</div>' . "\n" : '';
    $output .= $account['referer'] ? ' <div class="referer">' . t('Referer !link', array('!link' => l($account['referer'], $account['referer']))) . '</div>' . "\n" : '';
  }*/
  $output .= '</div>' . "\n";
  return $output;
}


/**
 * Process variables for user-picture.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $account: A user, node or comment object with 'name', 'uid' and 'picture'
 *   fields.
 *
 * @see user-picture.tpl.php
 * @see template_preprocess_user_picture
 */
function love_layout_template_preprocess_user_picture($variables) {
  $variables['user_picture'] = '';
  if (variable_get('user_pictures', 0)) { 
    $account = $variables['account'];
    if (!empty($account->picture)) {
      // @TODO: Ideally this function would only be passed file objects, but
      // since there's a lot of legacy code that JOINs the {users} table to
      // {node} or {comments} and passes the results into this function if we
      // a numeric value in the picture field we'll assume it's a file id
      // and load it for them. Once we've got user_load_multiple() and
      // comment_load_multiple() functions the user module will be able to load
      // the picture files in mass during the object's load process.
      if (is_numeric($account->picture)) {
        $account->picture = file_load($account->picture);
      }
      if (!empty($account->picture->uri)) {
        $filepath = $account->picture->uri;
      }
    }
    elseif (variable_get('user_picture_default', '')) {
      $filepath = variable_get('user_picture_default', '');
    }
    if (isset($filepath)) {
      //$alt = t("@user's picture", array('@user' => format_username($account)));
      $alt ='';
      if(isset($variables['timestamp']))
      $alt = $variables['timestamp'] ?  t('!time ago', array('!time' => format_interval(REQUEST_TIME - $variables['timestamp']))) : '';
      // If the image does not have a valid Drupal scheme (for eg. HTTP),
      // don't load image styles.
      if (module_exists('image') && file_valid_uri($filepath) && $style = variable_get('user_picture_style', '')) {
        $variables['user_picture'] = theme('image_style', array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $alt));
      }
      else {
        $variables['user_picture'] = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $alt));
      }
      if (!empty($account->uid) && user_access('access user profiles')) {
        $attributes = array('attributes' => array('title' => t('View user profile.')), 'html' => TRUE);
        $variables['user_picture'] = l($variables['user_picture'], "user/$account->uid", $attributes);
      }
    }
    return $variables['user_picture'];
  }
}

/**
 * Get latest visitors for block content.
 * @see user_visits_adv_visitors_block()
 */
function _love_user_visits_adv_visitors_block($limit = 9) {
  global $user;
  $output = '';

  if ($user->uid) {
    $visitors = user_visits_adv_get('visitors', $user->uid);
    if (is_array($visitors)) {
      $visitors = array_slice($visitors, 0, $limit, TRUE);
      foreach ($visitors as $uid => $visit) {
        $account = db_query('SELECT uid, name, picture FROM {users} WHERE uid = :uid', array(':uid' => $uid))->fetchObject();
        $output .= theme('user_visits', array('account' => $account, 'visit' => $visit));
      }
    }
  }
  return $output;
}

/**
 * Implements hook_modules_installed().
 *
 * @see devel_install()
 */
function love_layout_modules_installed($modules) {
  if (in_array('menu', $modules)) {
    $menu = array(
      'menu_name' => 'love',
      'title' => t('Love menu'),
      'description' => t('Love Navigation Menu'),
    );
    menu_save($menu);
  }
}

/**
 * Implements hook_menu().
 */
function love_layout_menu() {
  $items['user/%/statuses'] = array(
    'title' => 'Statuses',
    'page callback'    => '_statuses_page',
    'page arguments'   => array(1),
    /*'file'             => 'privatemsg.pages.inc',*/
    'access callback' => 'statuses_user_access',
    'access arguments' => array('add'),
    'type' => MENU_LOCAL_TASK,
  );
}
function _statuses_page($account) {
  $account = user_load($account);
  $output = theme('statuses_form_display', array('recipient' => $account, 'type' => 'user'));
  return $output;
}

//$value = theme('statuses_form_display', array('recipient' => $account, 'type' => 'user'));
function love_layout_menu_alter(&$items) {
  // Example - disable the page at node/add
  $items['messages']['title callback'] = 'privatemsg_title_callback_alter';
  $items['messages/recent'] = $items['messages'];
  $items['messages/recent']['menu_name'] = 'love';
  $items['messages/recent']['title'] = t('Messages');
  //$items['messages/recent']['title callback'] = 'privatemsg_title_callback_alter';

  $items['myspace'] = $items['user'];
  $items['myspace']['title'] = t('Myspace');
  $items['myspace']['menu_name'] = 'love';
  $items['myspace']['access callback'] = 'user_is_logged_in';

  $items['publish/photo'] = $items['publish'];
  $items['publish/photo']['title'] = t('Add Photos');
  $items['publish/photo']['menu_name'] = 'love';

  $items['invite']['title'] = t('Invite a friend');
  $items['invite/others'] = $items['invite'];
  $items['invite/others']['menu_name'] = 'love';

  $items['relationships/my'] = $items['relationships'];
  $items['relationships/my']['menu_name'] = 'love';
  $items['relationships/my']['title'] = t('My acquaintances');//熟人

  $items['relationships/my'] = $items['relationships'];
  $items['relationships/my']['menu_name'] = 'love';
  $items['relationships/my']['title'] = t('My acquaintances');//我想认识的

  $items['relationships/my'] = $items['relationships'];
  $items['relationships/my']['menu_name'] = 'love';
  $items['relationships/my']['title'] = t('I am a acquaintance of');//我想认识的
//熟人申请 Sent requests
//发出申请 Received requests
//你们是熟人==
  //加认识 男-女
  //-认识
  //互相认识 转角缘分 
}
/**
 * multilanguage t() for message.
 * @see privatemsg_title_callback()
 */
function privatemsg_title_callback_alter($title = NULL) {
  $count = privatemsg_unread_count();

  if ($count > 0) {
    //return format_plural($count, 'Messages (1 new)', 'Messages (@count new)');
    return format_plural($count, t('Messages (1 new)'), t('Messages (@count new)'));
  }
  return t('Messages');
}
/**
 * Implements hook_admin_path().
 */
function love_layout_admin_paths_alter(&$paths) {
  $paths['user/*/edit'] = FALSE;
}

function love_layout_preprocess_page(&$variables) {
 /* $headers = drupal_get_http_header();

  if (preg_match('@HTTP/1\.[01]\x20+403@', $headers)) {
    $variables['body_classes'] .= 'error-403,';
  }
  elseif (preg_match('@HTTP/1\.[01]\x20+404@', $headers)) {
    $variables['body_classes'] .= 'error-404,';
  }  */
}

/*
* Implements HOOK_form_user_profile_form_alter
* @see druedu_layout_alter_form_user_profile_form_alter
*/
function love_layout_alter_form_user_profile_form_alter(&$form, &$form_state, $form_id) {

  /*$form['accordions'] = array(
    '#type' => 'fieldset',
    '#weight' => 0,
  );
  $special_case = array('field_firstname', 'field_lastname');
  foreach($form as $key => $field) {
    if(is_array($field) && (strstr($key,'field_') || strstr($key, 'group_')) && !in_array($key , $special_case)) {
      ($form[$key][$field['#language']]['#required']) ? $required = '  <span class="summary">('.t('Field required').')</span>' : $required = '';
      $form[$key]['#type'] = 'fieldset';
      $form[$key]['#title'] =  $form[$key][LANGUAGE_NONE]['#title']. $required;
      $form[$key]['#collapsible'] = TRUE;
      $form[$key]['#collapsed'] = TRUE;
      $form[$key]['#group'] = 'accordions' ;
    }
  }*/
}

/**
 * Implements hook_user_view().
 * @see statuses_user_view()
 */
function love_layout_user_view($account, $view_mode) {

  drupal_add_css(drupal_get_path('module', 'love_layout').'/css/profiles.css');

}




/**
 * Implements hook_preprocess_author_pane().
 * @see function user_relationships_preprocess_author_pane(&$variables) {
 *  $variables['account']
 */
function _love_user_relationships_link($variables) {
  // Check if this preprocess needs to be run given who's calling it.
  $output = '';
  global $user;
  $account = $variables['account'];

  // Anonymous users and users viewing their own account won't get a link.
  if (!$user->uid || !$account->uid || $user->uid == $account->uid) {
    return $output;
  }
  // Get a list of selected relationship types
  $all_rtypes = user_relationships_types_load();
dpm($all_rtypes);
  foreach ($all_rtypes as $rtype) {
    $relationships = user_relationships_load(array('requester_id' => $user->uid, 'requestee_id' => $account->uid, 'rtid' => $rtype->rtid));

    if (count($relationships)) {
      // Existing relationship; need remove icon/link. (Despite the foreach,
      // there should only be one.)
      foreach ($relationships as $relationship) {
        $link_label = t('Remove @name from @rel_plural_name', array('@name' => format_username($account), '@rel_plural_name' => $relationship->plural_name));
        $css_class = array(str_replace(' ', '-', $relationship->name), 'author-pane-link', 'user_relationships_popup_link', 'author-relationship-remove-icon');
        //link to remove
        if (!isset($variables['user_relationships'])) {
          $variables['user_relationships'] = '';
        }
        $variables['user_relationships'] .= '<div class="author-pane-ur-link-item">';
        $variables['user_relationships'] .=
          l('<span>' . t('Remove @rel_name', array('@name' => format_username($account), '@rel_name' => ur_tt("user_relationships:rtid:$relationship->rtid:name", $relationship->name))) . '</span>',
          "user/{$user->uid}/relationships/{$relationship->rid}/remove",
          array(
                'query' => drupal_get_destination(),
                'html' => TRUE,
                'attributes'  => array('title' => $link_label, 'class' => $css_class),
          ));
        $variables['user_relationships'] .= '</div>';
      }
    }
    else {
      //No existing relationship; need an add icon/link.
      if (!user_relationships_can_request($user, $rtype) || !user_relationships_can_receive($account, $rtype)) {
        continue;
      }
      $css_class = array(str_replace(' ', '-', $rtype->name), 'author-pane-link', 'user_relationships_popup_link', 'author-relationship-remove-icon');
      //add link
      if (!isset($variables['user_relationships'])) {
        $variables['user_relationships'] = '';
      }
      $variables['user_relationships'] .= '<div class="author-pane-ur-link-item">';
      $variables['user_relationships'] .=
        l('<span>' . t('Add @rel_name', array('@name' => format_username($account), '@rel_name' => ur_tt("user_relationships:rtid:$rtype->rtid:name", $rtype->name))) . '</span>',
          "relationship/{$account->uid}/request/{$rtype->rtid}",
          array(
            'query' => drupal_get_destination(),
            'html' => TRUE,
            'attributes'  => array(
              'title' => t('Become @name\'s @rel_name', array('@name' => format_username($account), '@rel_name' => ur_tt("user_relationships:rtid:$rtype->rtid:name", $rtype->name))),
              'class' => $css_class
            ),
          )
        );
      $variables['user_relationships'] .= '</div>';
    }
    //$output .= $variables['user_relationships'];
  }
  return $variables['user_relationships'];
}